IF(BUILD_ARCH_NAME STREQUAL "x86")
    SET(FCONTEXT_CPU_ARCH "i386")
ELSEIF(BUILD_ARCH_NAME STREQUAL "x64")
	SET(FCONTEXT_CPU_ARCH "x86_64")
ELSEIF(BUILD_ARCH_NAME STREQUAL "arm")
    SET(FCONTEXT_CPU_ARCH "arm")
ELSE()
	MESSAGE(FATAL_ERROR "fcontext does not support this cpu.")
ENDIF()

IF(BUILD_PLATFORM_NAME MATCHES "darwin_")
	SET(FCONTEXT_ASM_EXT "sysv_macho_gas.S")
ELSEIF(BUILD_PLATFORM_NAME MATCHES "linux_")
	SET(FCONTEXT_ASM_EXT "sysv_elf_gas.S")
ELSEIF(BUILD_PLATFORM_NAME MATCHES "win_")
	SET(FCONTEXT_ASM_EXT "ms_pe_masm.asm")
ELSE()
	MESSAGE(FATAL_ERROR "fcontext does not support this platform.")
ENDIF()

SET(FCONTEXT_INC ${EXTERNAL_PATH}/fcontext/include/fcontext/fcontext.h)
SET(FCONTEXT_SRC ${EXTERNAL_PATH}/fcontext/source/stack.cpp)
SET(FCONTEXT_ASM
	${EXTERNAL_PATH}/fcontext/asm/make_${FCONTEXT_CPU_ARCH}_${FCONTEXT_ASM_EXT}
	${EXTERNAL_PATH}/fcontext/asm/jump_${FCONTEXT_CPU_ARCH}_${FCONTEXT_ASM_EXT}
	${EXTERNAL_PATH}/fcontext/asm/ontop_${FCONTEXT_CPU_ARCH}_${FCONTEXT_ASM_EXT})

if (MSVC)
    enable_language(CXX ASM_MASM)
else()
    enable_language(CXX ASM)
endif()
#SOURCE_GROUP(inc FILES ${FCONTEXT_INC})
#SOURCE_GROUP(src FILES ${FCONTEXT_SRC})
#SOURCE_GROUP(asm FILES ${FCONTEXT_ASM})

ADD_LIBRARY(fcontext STATIC ${FCONTEXT_INC} ${FCONTEXT_SRC} ${FCONTEXT_ASM})
TARGET_INCLUDE_DIRECTORIES(fcontext
	PRIVATE ${EXTERNAL_PATH}/fcontext/include/fcontext
    INTERFACE ${EXTERNAL_PATH}/fcontext/include)
IF(MSVC)
	TARGET_COMPILE_DEFINITIONS(fcontext PRIVATE _ITERATOR_DEBUG_LEVEL=0 _HAS_EXCEPTIONS=0)
ENDIF()
TARGET_COMPILE_DEFINITIONS(fcontext PRIVATE BOOST_CONTEXT_EXPORT=)
SET_TARGET_PROPERTIES(fcontext PROPERTIES FOLDER "External")
